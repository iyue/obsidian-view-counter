/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  // mySetting: '',
  viewCountKey: "view_count",
  lastViewDateKey: "last_view_date",
  interval: "120"
};
function log(e) {
  if (window._debug) {
    console.log(e);
  }
}
function formatDate(date) {
  return date.getFullYear() + "-" + String(date.getMonth() + 1).padStart(2, "0") + "-" + String(date.getDate()).padStart(2, "0") + " " + String(date.getHours()).padStart(2, "0") + ":" + String(date.getMinutes()).padStart(2, "0") + ":" + String(date.getSeconds()).padStart(2, "0");
}
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    const _this = this;
    await this.loadSettings();
    const app = this.app;
    app.workspace.on("file-open", (file) => {
      var _a;
      log(file);
      if ((file == null ? void 0 : file.extension) !== "md") {
        return;
      }
      if (!((_a = app.metadataCache.getFileCache(file)) == null ? void 0 : _a.frontmatter)) {
        return;
      }
      app.fileManager.processFrontMatter(file, (metadata) => {
        log(metadata);
        const viewCountKey = _this.settings.viewCountKey;
        const viewCount = metadata[viewCountKey];
        if (!viewCount) {
          metadata[viewCountKey] = 1;
        }
        const lastViewTimeKey = _this.settings.lastViewDateKey;
        const lastViewTime = metadata[lastViewTimeKey];
        if (!lastViewTime) {
          metadata[lastViewTimeKey] = formatDate(new Date());
        }
        const lastViewDate = new Date(metadata[lastViewTimeKey]);
        const timeDiff = (new Date().getTime() - lastViewDate.getTime()) / (1e3 * 60);
        if (timeDiff >= Number(_this.settings.interval)) {
          metadata[viewCountKey] += 1;
          metadata[lastViewTimeKey] = formatDate(new Date());
        }
      });
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("ViewCounter");
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for ViewCounter." });
    new import_obsidian.Setting(containerEl).setName("interval").setDesc("\u65F6\u95F4\u95F4\u9694").addText((text) => text.setPlaceholder("e.g. interval").setValue(this.plugin.settings.interval).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.interval = value || DEFAULT_SETTINGS.interval;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("viewCount name").setDesc("custom log key name").addText((text) => text.setPlaceholder("e.g. view_count").setValue(this.plugin.settings.viewCountKey).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.viewCountKey = value || DEFAULT_SETTINGS.viewCountKey;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("lastViewDate name").setDesc("custom log key name").addText((text) => text.setPlaceholder("e.g. last_view_date").setValue(this.plugin.settings.lastViewDateKey).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.lastViewDateKey = value || DEFAULT_SETTINGS.lastViewDateKey;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
